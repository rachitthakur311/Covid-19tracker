{"version":3,"sources":["components/Chart/Chart.module.css","images/image.png","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css"],"names":["module","exports","Cards","props","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","spacing","justify","item","component","Card","xs","md","cx","card","infected","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchcountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedcountries","setFetchedCountries","style","FormControl","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.95821cac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__sj2ZN\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1MV5P\",\"card\":\"Cards_card__2Vm9L\",\"infected\":\"Cards_infected__2FKR4\",\"recovered\":\"Cards_recovered__D1zDK\",\"deaths\":\"Cards_deaths__2xA4I\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards = (props) => {\r\n    const { confirmed, recovered, deaths, lastUpdate } = props.data;\r\n    if (!confirmed) {\r\n        return 'Loading..';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={8} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Active Cases of COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths Caused by COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl =`${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchcountries = async () =>{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ({data:{confirmed, deaths, recovered}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n\r\n    },[]);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date),\r\n                        datasets: [{\r\n                                data: dailyData.map(({ confirmed }) => confirmed),\r\n                                label: 'Infected',\r\n                                borderColor: '#3333ff',\r\n                                fill: true,\r\n                            }, {\r\n                                data: dailyData.map(({ deaths }) => deaths),\r\n                                label: 'Deaths',\r\n                                borderColor: 'red',\r\n                                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                                fill: true,\r\n                            }],\r\n                        }}\r\n                />) : null\r\n                         );\r\n                         console.log(confirmed, recovered, deaths)\r\n                    const barChart = (\r\n                       confirmed\r\n                        ? (\r\n                            <Bar \r\n                               data = {{\r\n                                    labels:['Infected', 'Recovered', 'Deaths'],\r\n                                    datasets: [{\r\n                                        label:'people',\r\n                                    backgroundColor: [\r\n                                            'rgba(0, 0, 255, 0.5)',\r\n                                            'rgba(0, 255, 0, 0.5)',\r\n                                            'rgba(255, 0, 0, 0.5)'\r\n                                        ],\r\n                                        data:[confirmed.value, recovered.value, deaths.value]\r\n                                    }]\r\n                               }} \r\n                               options = {{\r\n                                   legend: {display: false},\r\n                                   title:{display: true, text:`current state in ${country}`},\r\n                               }}\r\n                            />\r\n                        ): null\r\n                    ); \r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n\r\n            {country ? barChart : lineChart}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport style from './CountryPicker.module.css';\r\nimport {fetchcountries} from '../../api';\r\n\r\n\r\nconst CountryPicker = ({ handleCountryChange})=>{\r\n    const [fetchedcountries, setFetchedCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchcountries());\r\n\r\n        }\r\n        fetchAPI();\r\n    },[ setFetchedCountries])\r\n       \r\n    return(\r\n       <FormControl className = {style.FormControl}>\r\n           <NativeSelect  defaultValue = \"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n               <option value=\"global\">Global</option>\r\n    {fetchedcountries.map((country, i) => <option key={i} value = {country}>{country}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","// @ts-nocheck\r\nimport React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n    \r\n    state = {\r\n      data:{},\r\n      country: '',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        console.log(fetchedData);\r\n\r\n       this.setState({data :fetchedData});\r\n    }\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n       this.setState({data:fetchedData, country: country })\r\n\r\n    }\r\n    render(){\r\n        const {data, country} = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange = { this. handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n                <div>\r\n               \r\n                    <h6>&#169;Code_wid_elx (Rachit) / StayHomeStaySafe</h6>\r\n                    \r\n                </div>\r\n            </div>\r\n        ); \r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2WZr-\",\"image\":\"App_image__PESBj\"};"],"sourceRoot":""}